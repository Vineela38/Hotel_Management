using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Hotel_Management.Data;
using Hotel_Management.Models;
using Hotel_Management.Models.BAO;
using Microsoft.AspNetCore.Mvc;

namespace Hotel_Management.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class HotelReservationController : ControllerBase
    {
        private readonly HotelDb _context;
        private HotelBAO hotelBAO=null;

        public HotelReservationController(HotelDb context)
        {
            _context = context;
             hotelBAO=new HotelBAO(_context);
        }
        [HttpGet]
        public IActionResult getDetails()
        {
            //Hotel hotels=new Hotel();
            List<Hotel> hotels1 = hotelBAO.getDetails();
            if (hotels1.Count != 0)
                return Ok(hotels1);
            else
                return NotFound("No Records found");
        }
        [HttpPost]
        public IActionResult insertHotel([FromBody]Hotel hotel){
            string S=hotelBAO.insertHotel(hotel);
            if(S.Equals("1"))
                return Ok("Hotel Added Successfully Hotel ID "+hotel.HotelId);
            else
                return BadRequest(S);
        }
        [HttpGet("{id}")]
        public IActionResult gethotelbyid(string id)
        {
            Hotel? hotel=hotelBAO.GetHotelbyid(id);
            if(hotel!=null)
                return Ok(hotel);
            else
                return NotFound("No Hotel With Id "+id+ " Not Found");
        }
        [HttpPut("{id}")]
        public IActionResult UpdateHotel([FromBody] Hotel hotel,string id)
        {
            string S=hotelBAO.updateHotel(hotel,id);
            if(S.Equals("1"))
                return Ok(S);
            else
                return NotFound("No Hotel Found With id "+ id +"Found");
        }
         [HttpDelete("{id}")]
        public IActionResult DeleteHotel(string id)
        {
            string S=hotelBAO.DeleteHotel(id);
            if(S.Equals("1 Row Deleted"))
                return Ok(S);
            else
                return NotFound(S);
        }

    //     public async Task<IActionResult> CreateHotel([FromBody] Hotel hotel)
    // {
    //     if (string.IsNullOrWhiteSpace(hotel.HotelName) || hotel.HotelName.Length < 3)
    //     {
    //         return BadRequest("HotelName must be at least 3 characters long");
    //     }

    //     _context.hotels.Add(hotel);
    //     await _context.SaveChangesAsync(); // HotelID will be generated by the database trigger

    //     return Ok(new { HotelID = hotel.HotelId });
    // }
        
    }
}